% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MittagLefflerDist.R
\name{MittagLeffler}
\alias{MittagLeffler}
\alias{dml}
\alias{pml}
\alias{qml}
\alias{rml}
\title{Mittag-Leffler Distribution}
\source{
Uses Garrapa's code...
}
\usage{
dml(t, a, d = 1, log = FALSE)

pml(t, a, d = 1, lower.tail = TRUE, log.p = FALSE)

qml(p, a, d = 1, lower.tail = TRUE, log.p = FALSE)

rml(n, a, d = 1)
}
\arguments{
\item{t}{vector of quantiles}

\item{a}{alpha parameter of Mittag-Leffler distribution}

\item{d}{delta (scale) parameter of Mittag-Leffler distribution}

\item{log, log.p}{logical; if TRUE, probabilities p are given as log(p)}

\item{lower.tail}{logical; if TRUE, probabilities are P(X â‰¤ x) 
otherwise, P(X > x)}

\item{p}{vector of probabilities}

\item{n}{Number of random values}
}
\value{
\code{dml} returns the density, 
        \code{pml} returns the distribution function, 
        \code{qml} returns the quantile function, and 
        \code{rml} generates random values.
}
\description{
These functions provide probability density, cumulative distribution
function, quantile function and random variate generation for the 
two types of Mittag-Leffler distribution.
}
\details{
The generalized Mittag-Leffer function is defined by the power series 
    \deqn{E_(\alpha,\beta) (z) = \sum_(k=0)^(\inf) (z^k)/\Gamma(\alpha 
    k + \beta) }
for complex \eqn{z} and complex \eqn{\alpha, \beta} with 
\eqn{Real(\alpha) > 0}.

The Mittag-Leffler CDF is given by 
\deqn{F(t; \alpha, \delta) = 1 - E_(\alpha,1) (-(t/\delta)^\alpha)}
for \eqn{t \ge 0}, \eqn{0 < \alpha \le 1} 
and scale parameter \eqn{\delta > 0}.

The Mittag-Leffler PDF is given by 
\deqn{f(t; \alpha, \delta) = (t^(\alpha - 1))/(\delta^\alpha) 
E_(\alpha,\alpha) [-(t/\delta)^\alpha]}
for \eqn{t \ge 0}, \eqn{0 < \alpha \le 1} 
and scale parameter \eqn{\delta > 0}.
}
\examples{
dml(1, 0.8)
pml(2, 0.7, 1.5)
qml(0.25, 0.9)
rml(1000, 0.7, 1)

##Approximating Mittag-Leffler distribution parameters
##alpha and delta for observations X by Maximum Likelihood

mlml <- function(X) {
  log_l <- function(theta) {
    #transform parameters so can do optimization unconstrained
    theta[1] <- 1/(1+exp(-theta[1]))
    theta[2] <- exp(theta[2])
    -sum(log(dml(X,theta[1],theta[2])))
  }
  ml_theta <- stats::optim(c(0.5,0.5), fn=log_l)$par
  ml_a <- 1/(1 + exp(-ml_theta[1]))
  ml_d <- exp(ml_theta[2])
  print(paste("alpha =", ml_a, "delta =", ml_d))
}
}
\references{
Garrapa's paper and others...
}
\seealso{
Anything here?
}
